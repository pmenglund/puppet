#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
    class ParseError < Puppet::Error; end
    class ImportError < Racc::ParseError; end
    class AlreadyImportedError < ImportError; end
end


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id25cec75978', 'grammar.ra', 852

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id25cec75978

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 67, :_reduce_1,
 1, 67, :_reduce_none,
 1, 68, :_reduce_none,
 2, 68, :_reduce_4,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 4, 78, :_reduce_18,
 5, 78, :_reduce_19,
 3, 78, :_reduce_20,
 2, 78, :_reduce_21,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 3, 84, :_reduce_24,
 3, 84, :_reduce_25,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 1, 85, :_reduce_34,
 5, 71, :_reduce_35,
 5, 71, :_reduce_36,
 5, 71, :_reduce_37,
 5, 82, :_reduce_38,
 2, 72, :_reduce_39,
 1, 102, :_reduce_40,
 2, 102, :_reduce_41,
 6, 73, :_reduce_42,
 2, 73, :_reduce_43,
 3, 103, :_reduce_44,
 3, 103, :_reduce_45,
 1, 104, :_reduce_none,
 1, 104, :_reduce_none,
 3, 104, :_reduce_48,
 1, 105, :_reduce_none,
 3, 105, :_reduce_50,
 1, 106, :_reduce_51,
 1, 106, :_reduce_52,
 3, 107, :_reduce_53,
 3, 107, :_reduce_54,
 1, 108, :_reduce_none,
 1, 108, :_reduce_none,
 4, 110, :_reduce_57,
 1, 96, :_reduce_none,
 3, 96, :_reduce_59,
 0, 97, :_reduce_none,
 1, 97, :_reduce_none,
 1, 112, :_reduce_62,
 1, 87, :_reduce_63,
 1, 89, :_reduce_64,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 1, 111, :_reduce_none,
 3, 74, :_reduce_72,
 3, 74, :_reduce_73,
 3, 83, :_reduce_74,
 0, 98, :_reduce_75,
 1, 98, :_reduce_76,
 3, 98, :_reduce_77,
 3, 116, :_reduce_78,
 3, 118, :_reduce_79,
 1, 119, :_reduce_none,
 1, 119, :_reduce_none,
 0, 101, :_reduce_82,
 1, 101, :_reduce_83,
 3, 101, :_reduce_84,
 1, 120, :_reduce_none,
 3, 120, :_reduce_86,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 109, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 4, 91, :_reduce_105,
 3, 91, :_reduce_106,
 1, 93, :_reduce_107,
 2, 93, :_reduce_108,
 2, 123, :_reduce_109,
 1, 124, :_reduce_110,
 2, 124, :_reduce_111,
 1, 90, :_reduce_112,
 4, 86, :_reduce_113,
 4, 86, :_reduce_114,
 6, 76, :_reduce_115,
 5, 76, :_reduce_116,
 0, 125, :_reduce_none,
 4, 125, :_reduce_118,
 3, 125, :_reduce_119,
 1, 114, :_reduce_none,
 3, 114, :_reduce_121,
 3, 114, :_reduce_122,
 3, 114, :_reduce_123,
 3, 114, :_reduce_124,
 3, 114, :_reduce_125,
 3, 114, :_reduce_126,
 3, 114, :_reduce_127,
 3, 114, :_reduce_128,
 2, 114, :_reduce_129,
 3, 114, :_reduce_130,
 3, 114, :_reduce_131,
 3, 114, :_reduce_132,
 3, 114, :_reduce_133,
 3, 114, :_reduce_134,
 3, 114, :_reduce_135,
 2, 114, :_reduce_136,
 3, 114, :_reduce_137,
 3, 114, :_reduce_138,
 3, 114, :_reduce_139,
 5, 75, :_reduce_140,
 1, 127, :_reduce_none,
 2, 127, :_reduce_142,
 5, 128, :_reduce_143,
 4, 128, :_reduce_144,
 1, 129, :_reduce_none,
 3, 129, :_reduce_146,
 3, 92, :_reduce_147,
 1, 131, :_reduce_none,
 4, 131, :_reduce_149,
 1, 133, :_reduce_none,
 3, 133, :_reduce_151,
 3, 132, :_reduce_152,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_none,
 1, 130, :_reduce_160,
 1, 130, :_reduce_none,
 1, 134, :_reduce_162,
 3, 134, :_reduce_163,
 2, 77, :_reduce_164,
 6, 79, :_reduce_165,
 5, 79, :_reduce_166,
 7, 80, :_reduce_167,
 6, 80, :_reduce_168,
 6, 81, :_reduce_169,
 5, 81, :_reduce_170,
 1, 100, :_reduce_171,
 1, 95, :_reduce_172,
 1, 95, :_reduce_173,
 1, 95, :_reduce_174,
 1, 137, :_reduce_none,
 3, 137, :_reduce_176,
 1, 139, :_reduce_177,
 1, 140, :_reduce_178,
 1, 140, :_reduce_179,
 1, 140, :_reduce_180,
 1, 140, :_reduce_none,
 0, 69, :_reduce_182,
 0, 141, :_reduce_183,
 1, 135, :_reduce_none,
 3, 135, :_reduce_185,
 3, 135, :_reduce_186,
 1, 142, :_reduce_none,
 3, 142, :_reduce_188,
 3, 143, :_reduce_189,
 1, 143, :_reduce_190,
 3, 143, :_reduce_191,
 1, 143, :_reduce_192,
 1, 138, :_reduce_none,
 2, 138, :_reduce_194,
 1, 136, :_reduce_none,
 2, 136, :_reduce_196,
 1, 144, :_reduce_none,
 1, 144, :_reduce_none,
 1, 88, :_reduce_199,
 3, 113, :_reduce_200,
 4, 113, :_reduce_201,
 2, 113, :_reduce_202,
 1, 121, :_reduce_none,
 1, 121, :_reduce_none,
 0, 99, :_reduce_none,
 1, 99, :_reduce_206,
 1, 126, :_reduce_207,
 3, 122, :_reduce_208,
 4, 122, :_reduce_209,
 2, 122, :_reduce_210,
 1, 145, :_reduce_none,
 3, 145, :_reduce_212,
 3, 146, :_reduce_213,
 1, 147, :_reduce_214,
 1, 147, :_reduce_215,
 1, 147, :_reduce_216,
 4, 115, :_reduce_217,
 1, 94, :_reduce_none,
 4, 94, :_reduce_219 ]

racc_reduce_n = 220

racc_shift_n = 365

racc_action_table = [
    66,    69,    51,   330,   101,   116,   104,    51,    77,   219,
   293,   219,   202,   316,   136,   289,   115,   203,   234,    66,
    69,   120,    92,   101,   162,   104,   162,   202,   290,    66,
    69,   235,   203,    64,   190,   209,   210,    78,    80,   138,
    54,    86,   286,    58,   287,    54,    72,    99,    58,   288,
    82,   284,    64,    88,    66,    69,    78,    80,   191,   193,
    86,    56,   115,    56,   283,    72,    78,   249,    56,    82,
    86,   163,    66,    69,    34,   149,  -153,   241,    35,    82,
    56,    40,   116,    41,   321,    10,    51,    64,    66,    69,
    56,    78,    80,   115,   276,    86,    42,   275,   120,    70,
    72,  -154,    66,    69,    82,    64,   101,   277,   104,    78,
    80,   192,   116,    86,   164,    56,   222,    70,    72,   163,
    38,   115,    82,   115,    54,    78,   249,    58,   120,    86,
   116,    66,    69,    56,   149,    64,   283,   250,    82,    78,
    80,   115,   190,    86,   209,   210,   120,    56,    72,    56,
   334,    34,    82,    66,    69,    35,  -159,   101,   335,   104,
  -155,    46,    10,    56,   115,   213,   191,   193,    78,   249,
    44,    45,    86,   212,   306,    92,   128,   149,    34,    66,
    69,    82,    35,    77,    34,   310,    64,  -158,    35,    10,
    78,    80,    56,   274,    86,    10,    15,   215,   273,    72,
    99,    68,   311,    82,    66,    69,    88,   160,   101,   128,
   104,  -171,    64,  -156,    56,   317,    78,    80,    66,    69,
    86,  -157,   168,   169,    70,    72,    92,   177,   181,    82,
    66,    69,   177,   181,   101,  -158,   104,    64,   168,   169,
    56,    78,    80,   177,   181,    86,   177,   181,   215,   350,
    72,    99,    66,    69,    82,   240,   101,    88,   104,   215,
   217,    66,    69,    64,   320,    56,    56,    78,    80,   162,
    46,    86,   324,  -157,    92,  -155,    72,    66,    69,  -153,
    82,   101,   218,   104,    56,    64,   215,   217,   194,    78,
    80,    56,   208,    86,   197,  -154,   209,   210,    72,    99,
    40,  -156,    82,    66,    69,    88,   200,   101,    41,   104,
    64,   111,   206,    56,    78,    80,   131,   327,    86,   197,
   328,   219,   128,    72,    66,    69,   124,    82,   101,   221,
   104,   336,   197,   223,   111,   225,    64,   229,    56,   108,
    78,    80,  -156,  -154,    86,    66,    69,  -158,  -155,    72,
  -153,   343,   333,    82,    60,    59,   221,    64,   221,  -153,
   327,    78,    80,   353,    56,    86,   231,    66,    69,   355,
    72,   101,  -155,   104,    82,   230,   358,  -206,   115,    43,
    37,  -154,    78,   249,  -156,    56,    86,   nil,    66,    69,
   nil,   149,   101,   nil,   104,    82,   nil,   nil,   nil,   nil,
    64,   nil,   nil,   nil,    78,    80,    56,   nil,    86,   nil,
    66,    69,   nil,    72,   101,   nil,   104,    82,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    78,    80,   nil,    56,    86,
   nil,   nil,    92,   nil,    72,   nil,    66,    69,    82,   nil,
   101,   nil,   104,    64,   nil,   nil,   nil,    78,    80,    56,
   nil,    86,   nil,   nil,   nil,   nil,    72,    99,    92,   nil,
    82,   nil,   nil,    88,   nil,   nil,    66,    69,   nil,    64,
   101,    56,   104,    78,    80,   nil,   nil,    86,   nil,   nil,
   nil,   nil,    72,    99,   nil,   nil,    82,   nil,    92,    88,
   nil,   nil,    66,    69,   nil,   nil,   101,    56,   104,    64,
   nil,   nil,   nil,    78,    80,   nil,   nil,    86,   nil,   nil,
   nil,   nil,    72,    99,    92,   nil,    82,    66,    69,    88,
   nil,   101,   nil,   104,   nil,    64,   nil,    56,   nil,    78,
    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,    99,
   nil,   nil,    82,    66,    69,    88,   nil,   101,   nil,   104,
    64,   nil,   nil,    56,    78,    80,   nil,   nil,    86,   nil,
   nil,   nil,   nil,    72,   nil,    92,   nil,    82,   nil,    66,
    69,   nil,   nil,   101,   nil,   104,    64,   nil,    56,   nil,
    78,    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,
    99,    92,   nil,    82,   nil,   nil,    88,   nil,   nil,    66,
    69,   nil,    64,   101,    56,   104,    78,    80,   nil,   nil,
    86,   nil,   nil,   nil,   nil,    72,    99,   nil,   nil,    82,
   nil,    92,    88,   nil,   nil,    66,    69,   nil,   nil,   101,
    56,   104,    64,   nil,   nil,   nil,    78,    80,   nil,   nil,
    86,   nil,   nil,   nil,   nil,    72,    99,    92,   nil,    82,
    66,    69,    88,   nil,   101,   nil,   nil,   nil,    64,   nil,
    56,   nil,    78,    80,   nil,   nil,    86,   nil,   nil,   nil,
   nil,    72,    99,   nil,   nil,    82,    66,    69,    88,   nil,
   101,   nil,   104,    64,   nil,   nil,    56,    78,   152,   nil,
   nil,    86,   nil,   nil,   nil,   nil,   149,   nil,    92,   nil,
    82,   nil,    66,    69,   nil,   nil,   101,   nil,   104,    64,
   nil,    56,   nil,    78,    80,   nil,   nil,    86,   nil,   nil,
   nil,   nil,    72,    99,    92,   nil,    82,   nil,   nil,    88,
   nil,   nil,    66,    69,   nil,    64,   101,    56,   104,    78,
    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,    99,
    66,    69,    82,   nil,    92,    88,   nil,   nil,   nil,   183,
   167,   168,   169,    56,   nil,    64,   177,   181,   nil,    78,
    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,    99,
    66,    69,    82,   115,   101,    88,   104,    78,   249,   nil,
   nil,    86,   nil,    56,   nil,   nil,   149,   nil,   nil,   nil,
    82,   nil,    92,   nil,   nil,    66,    69,   183,   167,   168,
   169,    56,   nil,    64,   177,   181,   nil,    78,    80,   nil,
   nil,    86,   nil,   nil,   nil,   nil,    72,    99,   156,   nil,
    82,    66,    69,    88,   nil,   101,   nil,   104,    64,   nil,
   nil,    56,    78,    80,   nil,   nil,    86,   nil,   nil,   nil,
    70,    72,   nil,    92,   nil,    82,    66,    69,    66,    69,
   nil,   nil,   101,   nil,    64,   nil,    56,   nil,    78,    80,
   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,    99,   318,
   nil,    82,   nil,   nil,    88,   nil,   nil,   nil,   nil,    64,
   nil,    64,    56,    78,    80,    78,   249,    86,   nil,    86,
   nil,    70,    72,   nil,   149,   nil,    82,   nil,    82,    66,
    69,   nil,   nil,   101,   nil,   104,   nil,    56,   nil,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,    69,
   nil,    92,   101,   nil,   104,    66,    69,   nil,   nil,   101,
   nil,   104,    64,   nil,   nil,   nil,    78,    80,   nil,   nil,
    86,   nil,   nil,   nil,   nil,    72,    99,    66,    69,    82,
   nil,    64,    88,   nil,   nil,    78,    80,   nil,    64,    86,
    56,   nil,    78,    80,    72,   nil,    86,   nil,    82,   nil,
   nil,    72,    66,    69,   nil,    82,   101,   nil,   104,    56,
   115,   nil,    66,    69,    78,   249,    56,   nil,    86,   nil,
   nil,   nil,   nil,   149,   nil,   nil,   nil,    82,    66,    69,
   nil,   nil,   101,   185,   104,    64,   nil,   nil,    56,    78,
    80,   nil,   nil,    86,   nil,   115,    66,    69,    72,    78,
   249,   nil,    82,    86,   nil,   nil,   nil,   nil,   149,   nil,
   nil,    64,    82,    56,   nil,    78,    80,   nil,   nil,    86,
   nil,    66,    69,    56,    72,   101,   nil,   104,    82,   115,
   nil,   nil,   nil,    78,   249,   nil,   nil,    86,   nil,    56,
   nil,   nil,   149,    92,   nil,   nil,    82,    66,    69,   nil,
   nil,   101,   nil,   104,    64,   nil,   nil,    56,    78,    80,
   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,    99,    92,
   nil,    82,   nil,   nil,    88,   nil,   nil,    66,    69,   nil,
    64,   101,    56,   104,    78,    80,   nil,   nil,    86,   nil,
   nil,   nil,   nil,    72,    99,   nil,   nil,    82,   nil,    92,
    88,   nil,   nil,    66,    69,   nil,   nil,   101,    56,   104,
    64,   nil,   nil,   nil,    78,    80,   nil,   nil,    86,   nil,
   nil,   nil,   nil,    72,    99,    92,   nil,    82,   nil,   nil,
    88,   nil,   nil,    66,    69,   nil,    64,   101,    56,   104,
    78,    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,
    99,   nil,   nil,    82,   nil,    92,    88,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,   nil,    64,   nil,   237,   238,
    78,    80,   nil,   nil,    86,   nil,   nil,   nil,   nil,    72,
    99,   175,   180,    82,   nil,   nil,    88,   182,   nil,   nil,
   171,   173,   176,   179,    56,   nil,   175,   180,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   171,   173,   176,   179,   nil,
   nil,   nil,   nil,   nil,   174,   178,   nil,   nil,   183,   167,
   168,   169,   170,   172,   nil,   177,   181,   nil,   nil,   174,
   178,   nil,   nil,   183,   167,   168,   169,   170,   172,   nil,
   177,   181,   175,   180,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   171,   173,   176,   179,   175,   180,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   171,   173,   176,   179,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   178,   nil,   nil,   183,
   167,   168,   169,   170,   172,   nil,   177,   181,   174,   178,
   nil,   nil,   183,   167,   168,   169,   170,   172,   nil,   177,
   181,   175,   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   171,   173,   176,   179,   175,   180,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   171,   173,   176,   179,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   174,   178,   nil,   nil,   183,   167,
   168,   169,   170,   172,   nil,   177,   181,   nil,   nil,   nil,
   nil,   183,   167,   168,   169,   170,   172,   nil,   177,   181,
   175,   180,   nil,   nil,   nil,   nil,   nil,   nil,   254,   171,
   173,   176,   179,   175,   180,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   171,   173,   176,   179,   nil,   180,   nil,   nil,
   nil,   nil,   nil,   174,   178,   171,   nil,   183,   167,   168,
   169,   170,   172,   nil,   177,   181,   nil,   178,   180,   nil,
   183,   167,   168,   169,   170,   172,   171,   177,   181,   nil,
   nil,   180,   nil,   183,   167,   168,   169,   170,   172,   171,
   177,   181,   180,   nil,   183,   167,   168,   169,   170,   172,
   171,   177,   181,   nil,   183,   167,   168,   169,   170,   172,
   nil,   177,   181,   nil,   nil,   nil,   342,   183,   167,   168,
   169,   170,   172,   nil,   177,   181,   nil,   nil,   183,   167,
   168,   169,   170,   172,   nil,   177,   181,    27,   345,    32,
     1,   nil,     7,    11,   nil,    18,   nil,    25,   nil,    29,
   nil,     2,   nil,   nil,    10,    15,   nil,   325,   nil,    27,
   nil,    32,     1,   nil,     7,    11,   nil,    18,   nil,    25,
   nil,    29,   nil,     2,   nil,   nil,    10,    15,    27,   346,
    32,     1,   nil,     7,    11,   nil,    18,   nil,    25,   nil,
    29,   nil,     2,   nil,   nil,    10,    15,   nil,   356,   nil,
    27,   nil,    32,     1,   nil,     7,    11,   nil,    18,   nil,
    25,   nil,    29,   nil,     2,   nil,   nil,    10,    15,    27,
   313,    32,     1,   nil,     7,    11,   nil,    18,   nil,    25,
   nil,    29,   nil,     2,   nil,   nil,    10,    15,   nil,   271,
   nil,    27,   nil,    32,     1,   nil,     7,    11,   nil,    18,
   nil,    25,   nil,    29,   nil,     2,   nil,   nil,    10,    15,
    27,   360,    32,     1,   nil,     7,    11,   nil,    18,   nil,
    25,   nil,    29,   nil,     2,   nil,   nil,    10,    15,   nil,
   362,   nil,    27,   nil,    32,     1,   nil,     7,    11,   nil,
    18,   nil,    25,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,    27,   363,    32,     1,   nil,     7,    11,   nil,    18,
   nil,    25,   nil,    29,   nil,     2,   nil,   nil,    10,    15,
   nil,   292,   nil,    27,   nil,    32,     1,   nil,     7,    11,
   nil,    18,   nil,    25,   nil,    29,   nil,     2,   nil,   nil,
    10,    15,    27,   364,    32,     1,   nil,     7,    11,   nil,
    18,   nil,    25,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,   nil,   nil,   nil,    27,   nil,    32,     1,   nil,     7,
    11,   nil,    18,   nil,    25,   nil,    29,   nil,     2,   nil,
   nil,    10,    15,    27,   nil,    32,     1,   nil,     7,    11,
   nil,    18,   nil,    25,   nil,    29,   nil,     2,   nil,   nil,
    10,    15,    27,   nil,    32,     1,   nil,     7,    11,   nil,
    18,   nil,    25,   nil,    29,   nil,     2,   nil,   nil,    10,
    15,   183,   167,   168,   169,   170,   172,   nil,   177,   181 ]

racc_action_check = [
   178,   178,   138,   275,   178,    38,   178,   136,    80,   197,
   207,   152,   289,   232,    53,   205,    38,   289,   157,   160,
   160,    38,   178,   160,   152,   160,    80,   111,   205,   348,
   348,   157,   111,   178,   275,   207,   207,   178,   178,    53,
   138,   178,   202,   138,   203,   136,   178,   178,   136,   204,
   178,   197,   160,   178,   162,   162,   160,   160,   275,   275,
   160,   178,   348,   138,   195,   160,   348,   348,   136,   160,
   348,   242,   163,   163,    11,   348,    87,   162,    11,   348,
   160,     4,   116,     4,   242,    11,    18,   162,   334,   334,
   348,   162,   162,   116,   187,   162,     4,   187,   116,   162,
   162,    91,   324,   324,   162,   163,   324,   189,   324,   163,
   163,   104,    42,   163,    84,   162,   130,   163,   163,    81,
     4,   334,   163,    42,    18,   334,   334,    18,    42,   334,
   211,   164,   164,   163,   334,   324,   214,   164,   334,   324,
   324,   211,   104,   324,   130,   130,   211,    18,   324,   334,
   280,     1,   324,   167,   167,     1,    93,   167,   280,   167,
    76,     7,     1,   324,   164,   122,   104,   104,   164,   164,
     7,     7,   164,   122,   220,   167,   221,   164,   225,    25,
    25,   164,   225,    25,    12,   225,   167,    94,    12,   225,
   167,   167,   164,   186,   167,    12,    12,   186,   186,   167,
   167,    25,   226,   167,    27,    27,   167,    74,    27,   230,
    27,    72,    25,    89,   167,   233,    25,    25,    32,    32,
    25,    71,   255,   255,    25,    25,    27,   255,   255,    25,
    29,    29,   257,   257,    29,    67,    29,    27,   272,   272,
    25,    27,    27,   272,   272,    27,   256,   256,   323,   323,
    27,    27,   168,   168,    27,   161,   168,    27,   168,   161,
   161,   200,   200,    29,   239,    27,   181,    29,    29,   249,
    64,    29,   251,    95,   168,   100,    29,   287,   287,   106,
    29,   287,   126,   287,   177,   168,   126,   126,   107,   168,
   168,    29,   118,   168,   108,    63,   118,   118,   168,   168,
    62,    61,   168,   286,   286,   168,   109,   286,    49,   286,
   287,    48,   113,   168,   287,   287,    43,   271,   287,   124,
   273,   128,    41,   287,   284,   284,    39,   287,   284,   129,
   284,   282,   283,   134,    36,   135,   286,   139,   287,    30,
   286,   286,   295,   296,   286,   278,   278,   297,   299,   286,
   300,   303,   278,   286,    24,    19,   314,   284,   155,   154,
   325,   284,   284,   327,   286,   284,   153,    40,    40,   335,
   284,    40,   150,    40,   284,   144,   349,   350,   278,     6,
     2,   143,   278,   278,   141,   284,   278,   nil,   277,   277,
   nil,   278,   277,   nil,   277,   278,   nil,   nil,   nil,   nil,
    40,   nil,   nil,   nil,    40,    40,   278,   nil,    40,   nil,
   169,   169,   nil,    40,   169,   nil,   169,    40,   nil,   nil,
   nil,   277,   nil,   nil,   nil,   277,   277,   nil,    40,   277,
   nil,   nil,   169,   nil,   277,   nil,   170,   170,   277,   nil,
   170,   nil,   170,   169,   nil,   nil,   nil,   169,   169,   277,
   nil,   169,   nil,   nil,   nil,   nil,   169,   169,   170,   nil,
   169,   nil,   nil,   169,   nil,   nil,    44,    44,   nil,   170,
    44,   169,    44,   170,   170,   nil,   nil,   170,   nil,   nil,
   nil,   nil,   170,   170,   nil,   nil,   170,   nil,    44,   170,
   nil,   nil,    45,    45,   nil,   nil,    45,   170,    45,    44,
   nil,   nil,   nil,    44,    44,   nil,   nil,    44,   nil,   nil,
   nil,   nil,    44,    44,    45,   nil,    44,    46,    46,    44,
   nil,    46,   nil,    46,   nil,    45,   nil,    44,   nil,    45,
    45,   nil,   nil,    45,   nil,   nil,   nil,   nil,    45,    45,
   nil,   nil,    45,   171,   171,    45,   nil,   171,   nil,   171,
    46,   nil,   nil,    45,    46,    46,   nil,   nil,    46,   nil,
   nil,   nil,   nil,    46,   nil,   171,   nil,    46,   nil,   172,
   172,   nil,   nil,   172,   nil,   172,   171,   nil,    46,   nil,
   171,   171,   nil,   nil,   171,   nil,   nil,   nil,   nil,   171,
   171,   172,   nil,   171,   nil,   nil,   171,   nil,   nil,   173,
   173,   nil,   172,   173,   171,   173,   172,   172,   nil,   nil,
   172,   nil,   nil,   nil,   nil,   172,   172,   nil,   nil,   172,
   nil,   173,   172,   nil,   nil,    59,    59,   nil,   nil,    59,
   172,    59,   173,   nil,   nil,   nil,   173,   173,   nil,   nil,
   173,   nil,   nil,   nil,   nil,   173,   173,    59,   nil,   173,
    60,    60,   173,   nil,    60,   nil,   nil,   nil,    59,   nil,
   173,   nil,    59,    59,   nil,   nil,    59,   nil,   nil,   nil,
   nil,    59,    59,   nil,   nil,    59,   174,   174,    59,   nil,
   174,   nil,   174,    60,   nil,   nil,    59,    60,    60,   nil,
   nil,    60,   nil,   nil,   nil,   nil,    60,   nil,   174,   nil,
    60,   nil,   175,   175,   nil,   nil,   175,   nil,   175,   174,
   nil,    60,   nil,   174,   174,   nil,   nil,   174,   nil,   nil,
   nil,   nil,   174,   174,   175,   nil,   174,   nil,   nil,   174,
   nil,   nil,   176,   176,   nil,   175,   176,   174,   176,   175,
   175,   nil,   nil,   175,   nil,   nil,   nil,   nil,   175,   175,
   250,   250,   175,   nil,   176,   175,   nil,   nil,   nil,   258,
   258,   258,   258,   175,   nil,   176,   258,   258,   nil,   176,
   176,   nil,   nil,   176,   nil,   nil,   nil,   nil,   176,   176,
   237,   237,   176,   250,   237,   176,   237,   250,   250,   nil,
   nil,   250,   nil,   176,   nil,   nil,   250,   nil,   nil,   nil,
   250,   nil,   237,   nil,   nil,    68,    68,   260,   260,   260,
   260,   250,   nil,   237,   260,   260,   nil,   237,   237,   nil,
   nil,   237,   nil,   nil,   nil,   nil,   237,   237,    68,   nil,
   237,    69,    69,   237,   nil,    69,   nil,    69,    68,   nil,
   nil,   237,    68,    68,   nil,   nil,    68,   nil,   nil,   nil,
    68,    68,   nil,    69,   nil,    68,   234,   234,   231,   231,
   nil,   nil,   231,   nil,    69,   nil,    68,   nil,    69,    69,
   nil,   nil,    69,   nil,   nil,   nil,   nil,    69,    69,   234,
   nil,    69,   nil,   nil,    69,   nil,   nil,   nil,   nil,   234,
   nil,   231,    69,   234,   234,   231,   231,   234,   nil,   231,
   nil,   234,   234,   nil,   231,   nil,   234,   nil,   231,   180,
   180,   nil,   nil,   180,   nil,   180,   nil,   234,   nil,   231,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   219,   219,
   nil,   180,   219,   nil,   219,    77,    77,   nil,   nil,    77,
   nil,    77,   180,   nil,   nil,   nil,   180,   180,   nil,   nil,
   180,   nil,   nil,   nil,   nil,   180,   180,   213,   213,   180,
   nil,   219,   180,   nil,   nil,   219,   219,   nil,    77,   219,
   180,   nil,    77,    77,   219,   nil,    77,   nil,   219,   nil,
   nil,    77,   216,   216,   nil,    77,   216,   nil,   216,   219,
   213,   nil,   212,   212,   213,   213,    77,   nil,   213,   nil,
   nil,   nil,   nil,   213,   nil,   nil,   nil,   213,   101,   101,
   nil,   nil,   101,   101,   101,   216,   nil,   nil,   213,   216,
   216,   nil,   nil,   216,   nil,   212,   194,   194,   216,   212,
   212,   nil,   216,   212,   nil,   nil,   nil,   nil,   212,   nil,
   nil,   101,   212,   216,   nil,   101,   101,   nil,   nil,   101,
   nil,    88,    88,   212,   101,    88,   nil,    88,   101,   194,
   nil,   nil,   nil,   194,   194,   nil,   nil,   194,   nil,   101,
   nil,   nil,   194,    88,   nil,   nil,   194,   179,   179,   nil,
   nil,   179,   nil,   179,    88,   nil,   nil,   194,    88,    88,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    88,    88,   179,
   nil,    88,   nil,   nil,    88,   nil,   nil,    92,    92,   nil,
   179,    92,    88,    92,   179,   179,   nil,   nil,   179,   nil,
   nil,   nil,   nil,   179,   179,   nil,   nil,   179,   nil,    92,
   179,   nil,   nil,   183,   183,   nil,   nil,   183,   179,   183,
    92,   nil,   nil,   nil,    92,    92,   nil,   nil,    92,   nil,
   nil,   nil,   nil,    92,    92,   183,   nil,    92,   nil,   nil,
    92,   nil,   nil,    99,    99,   nil,   183,    99,    92,    99,
   183,   183,   nil,   nil,   183,   nil,   nil,   nil,   nil,   183,
   183,   nil,   nil,   183,   nil,    99,   183,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   183,   nil,    99,   nil,   159,   159,
    99,    99,   nil,   nil,    99,   nil,   nil,   nil,   nil,    99,
    99,   159,   159,    99,   nil,   nil,    99,    97,   nil,   nil,
   159,   159,   159,   159,    99,   nil,    97,    97,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    97,    97,    97,    97,   nil,
   nil,   nil,   nil,   nil,   159,   159,   nil,   nil,   159,   159,
   159,   159,   159,   159,   nil,   159,   159,   nil,   nil,    97,
    97,   nil,   nil,    97,    97,    97,    97,    97,    97,   nil,
    97,    97,   133,   133,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   133,   133,   133,   133,   140,   140,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   140,   140,   140,   140,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   133,   133,   nil,   nil,   133,
   133,   133,   133,   133,   133,   nil,   133,   133,   140,   140,
   nil,   nil,   140,   140,   140,   140,   140,   140,   nil,   140,
   140,   132,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   132,   132,   132,   266,   266,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   266,   266,   266,   266,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   132,   132,   nil,   nil,   132,   132,
   132,   132,   132,   132,   nil,   132,   132,   nil,   nil,   nil,
   nil,   266,   266,   266,   266,   266,   266,   nil,   266,   266,
   166,   166,   nil,   nil,   nil,   nil,   nil,   nil,   166,   166,
   166,   166,   166,   262,   262,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   262,   262,   262,   262,   nil,   264,   nil,   nil,
   nil,   nil,   nil,   166,   166,   264,   nil,   166,   166,   166,
   166,   166,   166,   nil,   166,   166,   nil,   262,   261,   nil,
   262,   262,   262,   262,   262,   262,   261,   262,   262,   nil,
   nil,   267,   nil,   264,   264,   264,   264,   264,   264,   267,
   264,   264,   263,   nil,   268,   268,   268,   268,   268,   268,
   263,   268,   268,   nil,   261,   261,   261,   261,   261,   261,
   nil,   261,   261,   nil,   nil,   nil,   291,   267,   267,   267,
   267,   267,   267,   nil,   267,   267,   nil,   nil,   263,   263,
   263,   263,   263,   263,   nil,   263,   263,   291,   311,   291,
   291,   nil,   291,   291,   nil,   291,   nil,   291,   nil,   291,
   nil,   291,   nil,   nil,   291,   291,   nil,   270,   nil,   311,
   nil,   311,   311,   nil,   311,   311,   nil,   311,   nil,   311,
   nil,   311,   nil,   311,   nil,   nil,   311,   311,   270,   312,
   270,   270,   nil,   270,   270,   nil,   270,   nil,   270,   nil,
   270,   nil,   270,   nil,   nil,   270,   270,   nil,   344,   nil,
   312,   nil,   312,   312,   nil,   312,   312,   nil,   312,   nil,
   312,   nil,   312,   nil,   312,   nil,   nil,   312,   312,   344,
   229,   344,   344,   nil,   344,   344,   nil,   344,   nil,   344,
   nil,   344,   nil,   344,   nil,   nil,   344,   344,   nil,   182,
   nil,   229,   nil,   229,   229,   nil,   229,   229,   nil,   229,
   nil,   229,   nil,   229,   nil,   229,   nil,   nil,   229,   229,
   182,   353,   182,   182,   nil,   182,   182,   nil,   182,   nil,
   182,   nil,   182,   nil,   182,   nil,   nil,   182,   182,   nil,
   355,   nil,   353,   nil,   353,   353,   nil,   353,   353,   nil,
   353,   nil,   353,   nil,   353,   nil,   353,   nil,   nil,   353,
   353,   355,   359,   355,   355,   nil,   355,   355,   nil,   355,
   nil,   355,   nil,   355,   nil,   355,   nil,   nil,   355,   355,
   nil,   206,   nil,   359,   nil,   359,   359,   nil,   359,   359,
   nil,   359,   nil,   359,   nil,   359,   nil,   359,   nil,   nil,
   359,   359,   206,   361,   206,   206,   nil,   206,   206,   nil,
   206,   nil,   206,   nil,   206,   nil,   206,   nil,   nil,   206,
   206,   nil,   nil,   nil,   361,   nil,   361,   361,   nil,   361,
   361,   nil,   361,   nil,   361,   nil,   361,   nil,   361,   nil,
   nil,   361,   361,     9,   nil,     9,     9,   nil,     9,     9,
   nil,     9,   nil,     9,   nil,     9,   nil,     9,   nil,   nil,
     9,     9,     0,   nil,     0,     0,   nil,     0,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,     0,   nil,   nil,     0,
     0,   259,   259,   259,   259,   259,   259,   nil,   259,   259 ]

racc_action_pointer = [
  1742,   115,   336,   nil,    75,   nil,   379,   155,   nil,  1723,
   nil,    38,   148,   nil,   nil,   nil,   nil,   nil,    84,   340,
   nil,   nil,   nil,   nil,   346,   177,   nil,   202,   nil,   228,
   331,   nil,   216,   nil,   nil,   nil,   310,   nil,   -19,   318,
   365,   282,    88,   316,   464,   490,   515,   nil,   287,   300,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   623,
   648,   278,   294,   272,   264,   nil,   nil,   212,   803,   829,
   nil,   198,   205,   nil,   201,   nil,   137,   933,   nil,   nil,
     2,   107,   nil,   nil,    91,   nil,   nil,    53,  1049,   190,
   nil,    78,  1105,   133,   164,   250,   nil,  1209,   nil,  1161,
   252,  1006,   nil,   nil,   102,   nil,   256,   280,   254,   294,
   nil,    -8,   nil,   304,   nil,   nil,    58,   nil,   246,   nil,
   nil,   nil,   147,   nil,   279,   nil,   275,   nil,   310,   317,
    94,   nil,  1314,  1255,   326,   298,     5,   nil,     0,   329,
  1268,   361,   nil,   358,   355,   nil,   nil,   nil,   nil,   nil,
   349,   nil,     0,   325,   336,   346,   nil,     6,   nil,  1194,
    17,   248,    52,    70,   129,   nil,  1373,   151,   250,   408,
   434,   541,   567,   597,   674,   700,   730,   221,    -2,  1075,
   907,   203,  1600,  1131,   nil,   nil,   186,    85,   nil,    96,
   nil,   nil,   nil,   nil,  1024,    52,   nil,    -2,   nil,   nil,
   259,   nil,    27,    29,    24,     3,  1682,   -15,   nil,   nil,
   nil,   106,   990,   955,   124,   nil,   980,   nil,   nil,   926,
   165,   136,   nil,   nil,   nil,   142,   194,   nil,   nil,  1581,
   169,   856,     4,   206,   854,   nil,   nil,   778,   nil,   257,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   748,   261,   nil,   nil,   nil,   166,   185,   171,   705,  1737,
   753,  1420,  1386,  1444,  1399,   nil,  1327,  1433,  1410,   nil,
  1518,   286,   182,   313,   nil,    -6,   nil,   386,   343,   nil,
   138,   nil,   322,   292,   322,   nil,   301,   275,   nil,   -23,
   nil,  1477,   nil,   nil,   nil,   319,   320,   324,   nil,   325,
   327,   nil,   nil,   342,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1499,  1540,   nil,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   237,   100,   329,   nil,   355,   nil,   nil,
   nil,   nil,   nil,   nil,    86,   361,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1559,   nil,   nil,   nil,    27,   367,
   368,   nil,   nil,  1622,   nil,  1641,   nil,   nil,   nil,  1663,
   nil,  1704,   nil,   nil,   nil ]

racc_action_default = [
  -182,  -220,   -40,   -11,  -220,   -12,  -220,  -220,   -13,    -1,
  -173,  -174,  -220,   -14,    -2,  -171,   -15,    -3,  -220,  -220,
   -16,    -5,   -17,    -6,  -220,  -172,    -7,  -220,    -8,  -220,
  -220,    -9,  -220,   -10,  -174,  -172,  -182,   -41,  -182,   -43,
  -220,   -75,  -182,  -220,  -220,  -220,  -220,    -4,  -182,  -220,
   -39,  -179,  -181,  -182,  -178,  -175,  -207,  -177,  -180,  -220,
   -75,   -27,  -220,   -28,  -199,  -159,  -107,   -29,  -220,  -220,
   -34,   -30,   -64,   -31,  -218,  -161,   -32,  -220,  -112,   -33,
   -63,   -21,   -62,   -22,  -220,   -23,  -160,   -26,  -220,   -98,
  -100,   -95,  -220,  -104,   -96,  -103,   -99,  -220,   -97,  -220,
   -93,  -220,  -101,  -120,  -220,  -102,   -94,  -220,   -82,  -164,
  -162,  -183,  -184,  -220,   -55,  -199,  -182,   -46,  -220,   -47,
   -63,   -49,  -220,   -56,   -82,   -85,  -220,   -76,  -220,  -205,
  -220,   365,   -72,   -74,  -220,  -182,  -220,  -193,  -220,  -220,
   -73,   -69,   -58,   -67,  -220,  -158,  -157,   -70,   -68,   -64,
   -65,   -71,   -63,   -60,   -66,  -205,   -20,  -220,  -108,  -220,
  -220,  -220,  -220,  -220,  -220,  -129,  -220,  -220,  -220,  -220,
  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,  -220,
  -220,  -220,  -220,  -220,  -136,  -202,  -220,  -220,  -211,  -220,
  -214,  -215,  -210,  -216,  -220,  -205,   -80,  -220,   -81,   -83,
  -220,  -187,  -192,  -190,  -220,  -220,  -220,  -220,   -44,   -52,
   -51,  -220,  -220,  -220,  -205,  -203,  -220,  -204,  -114,  -220,
  -220,  -206,   -45,  -217,  -195,  -220,  -220,  -176,  -194,  -220,
   -75,   -61,  -220,  -220,  -220,   -18,  -109,  -220,  -110,  -220,
  -113,  -106,  -220,   -24,   -25,  -156,  -148,  -154,  -155,   -63,
  -220,  -220,  -153,  -147,  -139,  -124,  -126,  -125,  -127,  -131,
  -128,  -133,  -138,  -135,  -132,  -121,  -137,  -134,  -130,  -122,
  -220,  -117,  -123,  -204,  -200,  -220,  -208,  -220,  -220,  -141,
  -220,  -145,  -220,  -206,  -220,  -163,  -220,  -220,  -185,  -220,
  -186,  -220,  -166,   -50,   -48,   -92,   -89,   -90,   -91,   -87,
   -88,   -53,   -54,  -220,   -86,   -78,   -37,   -77,  -196,  -197,
  -198,  -220,  -220,  -170,  -205,   -59,   -35,   -36,   -19,  -111,
  -219,  -105,  -150,  -205,  -220,  -117,  -116,  -220,  -201,  -212,
  -209,  -213,  -142,  -140,  -220,  -220,   -38,   -84,   -79,  -191,
  -189,  -188,  -165,   -42,  -220,  -168,  -169,   -57,  -220,  -220,
  -204,  -152,  -115,  -220,  -146,  -220,  -167,  -151,  -149,  -220,
  -119,  -220,  -144,  -118,  -143 ]

racc_goto_table = [
    19,    73,   129,    30,    36,   201,   246,   147,   142,    19,
     4,    76,    30,     9,    48,    81,   158,   251,   110,     4,
   279,   155,    49,   188,   107,    47,    55,   196,    85,   243,
   326,   294,    79,   220,    67,   125,   148,   126,   118,   195,
    14,   134,   130,   196,    73,   113,   150,   281,   301,   302,
   348,   278,   236,   337,    76,   214,   253,   135,   157,   233,
    50,   323,   109,   153,   226,    53,   139,   151,   232,   145,
   228,    85,   125,   204,   161,    79,   112,    67,   205,    39,
   308,   187,     6,   nil,   352,   nil,   nil,   nil,   112,   nil,
   nil,   nil,   322,   137,   nil,   nil,   125,   nil,   186,   282,
   243,   nil,   nil,   251,   332,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   207,   nil,   303,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,   281,   nil,   nil,   nil,   nil,   nil,   nil,    73,    73,
   307,   nil,   nil,   nil,   227,   nil,   nil,   nil,    76,    76,
   248,   nil,   242,   nil,   nil,   239,   nil,   nil,   nil,   nil,
   nil,    65,   nil,   nil,   nil,    85,   244,   nil,   nil,    79,
    79,    67,    67,   145,   nil,   224,   nil,   nil,   147,   315,
   248,   nil,    19,   341,   319,    30,   285,   354,   298,   298,
   357,   314,     4,   nil,   329,   270,    65,   nil,   299,   299,
   nil,   251,   196,   145,    65,   nil,    19,   148,   nil,    30,
    73,   304,   nil,    87,   305,   nil,     4,   150,   347,   291,
    76,   297,   297,   nil,   nil,   nil,   123,   349,   309,    19,
   123,   nil,    30,   nil,   nil,   nil,   248,   244,   151,     4,
   145,    79,   312,    67,   nil,   nil,   nil,    52,   154,    52,
   nil,   nil,   nil,   nil,    61,   nil,    87,   nil,   nil,   145,
   nil,   nil,   nil,   nil,   248,   nil,   nil,   114,   nil,   nil,
    19,   114,   331,    30,    63,   nil,   nil,   nil,   nil,   338,
     4,   339,   340,   nil,   nil,   nil,    47,   145,   265,   141,
   nil,    19,   269,   nil,    30,   nil,   nil,    61,    65,    65,
    65,     4,   nil,   nil,   123,   nil,   nil,    47,   nil,   143,
   nil,    19,    19,   nil,    30,    30,   nil,    63,   nil,   351,
   248,     4,     4,   nil,   344,   nil,   nil,   nil,    47,   nil,
    65,   nil,   nil,   nil,   248,   nil,   nil,    71,   nil,   nil,
   nil,   nil,   nil,   145,    19,   114,   nil,    30,    65,    65,
    87,    87,   252,    19,     4,    19,    30,   145,    30,    19,
    47,    19,    30,     4,    30,     4,   359,    65,   361,     4,
    65,     4,   146,   nil,   nil,    47,   nil,    47,   nil,   nil,
    71,   nil,   252,   nil,   nil,   nil,    65,   nil,   nil,   nil,
   nil,    61,    61,   245,   nil,   nil,   nil,   nil,   nil,   123,
   300,   300,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    63,    63,   247,    65,   nil,   nil,   nil,   nil,   154,
   nil,   nil,    87,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   252,   nil,
   114,   295,   295,   247,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   141,   296,   296,    61,   nil,   nil,   252,   nil,    97,   nil,
    65,   nil,   nil,   nil,    71,    71,   146,   nil,   nil,   245,
   143,   nil,   nil,    63,    65,   132,   133,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,
   140,   nil,   nil,   nil,   nil,   nil,   146,   245,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   252,   nil,   146,   146,   nil,   247,   nil,   165,
   nil,   nil,   nil,   166,   nil,   nil,   252,   nil,   nil,   nil,
   184,   nil,   nil,   146,   nil,   nil,    71,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,   nil,   nil,
   nil,   nil,   nil,   247,   nil,   nil,   nil,   nil,   nil,   nil,
   146,   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   nil,   266,
   267,   268,   nil,   nil,   272,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   146 ]

racc_goto_check = [
    49,    26,    32,    20,    29,    77,    66,    47,    44,    49,
    34,    27,    20,     2,    29,    18,    57,    64,    27,    34,
    62,    32,    34,    80,    51,     4,    73,    50,    20,    19,
    59,    39,    28,    33,    24,    51,    26,    54,    38,    35,
     3,    51,    38,    50,    26,    69,    27,    64,    43,    43,
    55,    61,    58,    53,    27,    35,    65,    69,    18,    33,
     5,    67,    68,    30,    70,    71,    72,    28,    31,    24,
    74,    20,    51,    75,    54,    28,     3,    24,    76,    37,
    78,    79,     1,   nil,    59,   nil,   nil,   nil,     3,   nil,
   nil,   nil,    66,     3,   nil,   nil,    51,   nil,    54,    33,
    19,   nil,   nil,    64,    62,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,
   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,
    50,   nil,   nil,   nil,    73,   nil,   nil,   nil,    27,    27,
    27,   nil,    18,   nil,   nil,    51,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    20,    20,   nil,   nil,    28,
    28,    24,    24,    24,   nil,     3,   nil,   nil,    47,    44,
    27,   nil,    49,    77,    57,    20,    27,    64,    26,    26,
    66,    32,    34,   nil,    80,     2,    46,   nil,    27,    27,
   nil,    64,    50,    24,    46,   nil,    49,    26,   nil,    20,
    26,    51,   nil,    21,    51,   nil,    34,    27,    33,     2,
    27,    24,    24,   nil,   nil,   nil,    21,    33,    29,    49,
    21,   nil,    20,   nil,   nil,   nil,    27,    20,    28,    34,
    24,    28,     2,    24,   nil,   nil,   nil,    60,    21,    60,
   nil,   nil,   nil,   nil,    22,   nil,    21,   nil,   nil,    24,
   nil,   nil,   nil,   nil,    27,   nil,   nil,    22,   nil,   nil,
    49,    22,    51,    20,    23,   nil,   nil,   nil,   nil,    51,
    34,    51,    51,   nil,   nil,   nil,     4,    24,    60,    22,
   nil,    49,    60,   nil,    20,   nil,   nil,    22,    46,    46,
    46,    34,   nil,   nil,    21,   nil,   nil,     4,   nil,    23,
   nil,    49,    49,   nil,    20,    20,   nil,    23,   nil,    51,
    27,    34,    34,   nil,     2,   nil,   nil,   nil,     4,   nil,
    46,   nil,   nil,   nil,    27,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,    24,    49,    22,   nil,    20,    46,    46,
    21,    21,    21,    49,    34,    49,    20,    24,    20,    49,
     4,    49,    20,    34,    20,    34,     2,    46,     2,    34,
    46,    34,    25,   nil,   nil,     4,   nil,     4,   nil,   nil,
    25,   nil,    21,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,    22,    22,    22,   nil,   nil,   nil,   nil,   nil,    21,
    21,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,    23,    23,    46,   nil,   nil,   nil,   nil,    21,
   nil,   nil,    21,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
    22,    22,    22,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    23,    23,    22,   nil,   nil,    21,   nil,    48,   nil,
    46,   nil,   nil,   nil,    25,    25,    25,   nil,   nil,    22,
    23,   nil,   nil,    23,    46,    48,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
    48,   nil,   nil,   nil,   nil,   nil,    25,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,    25,    25,   nil,    23,   nil,    48,
   nil,   nil,   nil,    48,   nil,   nil,    21,   nil,   nil,   nil,
    48,   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,   nil,    48,
    48,    48,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25 ]

racc_goto_pointer = [
   nil,    82,    13,    40,    16,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -10,  -134,
     3,   188,   229,   249,     9,   312,   -24,   -14,     7,     3,
     3,   -85,   -39,   -96,    10,   -69,   nil,    75,     0,  -180,
   nil,   nil,   nil,  -164,   -52,   nil,   136,   -53,   441,     0,
   -81,    -5,   nil,  -230,    -3,  -273,   nil,   -53,  -107,  -241,
   111,  -143,  -174,   nil,  -147,  -108,  -158,  -189,    30,     9,
   -71,    47,    13,     8,   -68,   -38,   -33,  -106,  -145,   -23,
   -81,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   117,    17,    21,    23,    26,    28,    31,
    33,     3,     5,     8,    13,    16,    20,    22,   nil,    83,
   105,   106,    89,    91,    94,    95,    98,   100,   102,    24,
   nil,   nil,   nil,   nil,    62,   nil,    12,   nil,   nil,   119,
   211,   121,   122,   nil,   nil,   144,    93,    96,   159,    74,
   127,   103,   198,   199,   nil,   216,    90,   nil,   nil,   nil,
    75,   nil,   nil,   280,    84,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,
   nil,   189 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING => 2,
 :DQPRE => 3,
 :DQMID => 4,
 :DQPOST => 5,
 :LBRACK => 6,
 :RBRACK => 7,
 :LBRACE => 8,
 :RBRACE => 9,
 :SYMBOL => 10,
 :FARROW => 11,
 :COMMA => 12,
 :TRUE => 13,
 :FALSE => 14,
 :EQUALS => 15,
 :APPENDS => 16,
 :LESSEQUAL => 17,
 :NOTEQUAL => 18,
 :DOT => 19,
 :COLON => 20,
 :LLCOLLECT => 21,
 :RRCOLLECT => 22,
 :QMARK => 23,
 :LPAREN => 24,
 :RPAREN => 25,
 :ISEQUAL => 26,
 :GREATEREQUAL => 27,
 :GREATERTHAN => 28,
 :LESSTHAN => 29,
 :IF => 30,
 :ELSE => 31,
 :IMPORT => 32,
 :DEFINE => 33,
 :ELSIF => 34,
 :VARIABLE => 35,
 :CLASS => 36,
 :INHERITS => 37,
 :NODE => 38,
 :BOOLEAN => 39,
 :NAME => 40,
 :SEMIC => 41,
 :CASE => 42,
 :DEFAULT => 43,
 :AT => 44,
 :LCOLLECT => 45,
 :RCOLLECT => 46,
 :CLASSNAME => 47,
 :CLASSREF => 48,
 :NOT => 49,
 :OR => 50,
 :AND => 51,
 :UNDEF => 52,
 :PARROW => 53,
 :PLUS => 54,
 :MINUS => 55,
 :TIMES => 56,
 :DIV => 57,
 :LSHIFT => 58,
 :RSHIFT => 59,
 :UMINUS => 60,
 :MATCH => 61,
 :NOMATCH => 62,
 :REGEX => 63,
 :SQTEXT => 64,
 :DQTEXT => 65 }

racc_use_result_var = true

racc_nt_base = 66

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING',
'DQPRE',
'DQMID',
'DQPOST',
'LBRACK',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'APPENDS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'UNDEF',
'PARROW',
'PLUS',
'MINUS',
'TIMES',
'DIV',
'LSHIFT',
'RSHIFT',
'UMINUS',
'MATCH',
'NOMATCH',
'REGEX',
'SQTEXT',
'DQTEXT',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'append',
'funcvalues',
'namestring',
'resourceref',
'name',
'variable',
'type',
'boolean',
'funcrvalue',
'selector',
'quotedtext',
'hasharrayaccesses',
'classname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'classref',
'anyparams',
'at',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'undef',
'array',
'expression',
'hasharrayaccess',
'param',
'rvalue',
'addparam',
'anyparam',
'rvalues',
'comma',
'hash',
'dqrval',
'dqtail',
'else',
'regex',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'qtexts',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'nodename',
'hostname',
'nothing',
'arguments',
'argument',
'classnameordefault',
'hashpairs',
'hashpair',
'key']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 45
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 61
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 85
  def _reduce_18( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_19( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 99
  def _reduce_20( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 107
  def _reduce_21( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0][:value],
        :line => val[0][:line],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 115
  def _reduce_24( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 124
  def _reduce_25( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

 # reduce 26 omitted

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 138
  def _reduce_34( val, _values, result )
                    result = ast AST::Name, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 160
  def _reduce_35( val, _values, result )
    @lexer.commentpop
    array = val[2]
    if array.details[:class] <= AST::ResourceInstance
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.details[:class] <= AST::ResourceInstance
            raise Puppet::DevError, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::Resource,
            :type => val[0],
            :title => instance[0],
            :parameters => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 163
  def _reduce_36( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 166
  def _reduce_37( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 172
  def _reduce_38( val, _values, result )
    @lexer.commentpop
    result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_39( val, _values, result )
    type = val[0]

    if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect without storeconfigs being set")
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 200
  def _reduce_40( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_41( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 225
  def _reduce_42( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    args[:override] = val[3]
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 244
  def _reduce_43( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type }

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
        Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
    end
    result = ast AST::Collection, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 254
  def _reduce_44( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 262
  def _reduce_45( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

module_eval <<'.,.,', 'grammar.ra', 270
  def _reduce_48( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 49 omitted

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_50( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 277
  def _reduce_51( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 278
  def _reduce_52( val, _values, result )
 result=val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 285
  def _reduce_53( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 290
  def _reduce_54( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 297
  def _reduce_57( val, _values, result )
    result = ast AST::ResourceInstance, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 58 omitted

module_eval <<'.,.,', 'grammar.ra', 307
  def _reduce_59( val, _values, result )
    if val[0].instance_of?(AST::ResourceInstance)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 60 omitted

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 314
  def _reduce_62( val, _values, result )
    result = ast AST::Undef, :value => :undef
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 318
  def _reduce_63( val, _values, result )
    result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 322
  def _reduce_64( val, _values, result )
    result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 339
  def _reduce_72( val, _values, result )
    if val[0][:value] =~ /::/
        raise Puppet::ParseError, "Cannot assign to variables in other namespaces"
    end
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 342
  def _reduce_73( val, _values, result )
    result = ast AST::VarDef, :name => val[0], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 347
  def _reduce_74( val, _values, result )
    variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
    result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 352
  def _reduce_75( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 352
  def _reduce_76( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 361
  def _reduce_77( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 365
  def _reduce_78( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 370
  def _reduce_79( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
                                     :add => true
   result
  end
.,.,

 # reduce 80 omitted

 # reduce 81 omitted

module_eval <<'.,.,', 'grammar.ra', 378
  def _reduce_82( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 378
  def _reduce_83( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 387
  def _reduce_84( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 85 omitted

module_eval <<'.,.,', 'grammar.ra', 396
  def _reduce_86( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 87 omitted

 # reduce 88 omitted

 # reduce 89 omitted

 # reduce 90 omitted

 # reduce 91 omitted

 # reduce 92 omitted

 # reduce 93 omitted

 # reduce 94 omitted

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

 # reduce 102 omitted

 # reduce 103 omitted

 # reduce 104 omitted

module_eval <<'.,.,', 'grammar.ra', 425
  def _reduce_105( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 430
  def _reduce_106( val, _values, result )
    result = ast AST::Function,
        :name => val[0][:value], :line => val[0][:line],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 431
  def _reduce_107( val, _values, result )
 result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 432
  def _reduce_108( val, _values, result )
 result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 434
  def _reduce_109( val, _values, result )
 result = [val[0]] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 436
  def _reduce_110( val, _values, result )
 result = [ast(AST::String,val[0])]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_111( val, _values, result )
 result = [ast(AST::String,val[0])] + val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 442
  def _reduce_112( val, _values, result )
    result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 447
  def _reduce_113( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 449
  def _reduce_114( val, _values, result )
    result = ast AST::ResourceReference, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 463
  def _reduce_115( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_116( val, _values, result )
    @lexer.commentpop
    args = {
        :test => val[1],
        :statements => ast(AST::Nop)
    }

    if val[4]
        args[:else] = val[4]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 117 omitted

module_eval <<'.,.,', 'grammar.ra', 482
  def _reduce_118( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 486
  def _reduce_119( val, _values, result )
    @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)
   result
  end
.,.,

 # reduce 120 omitted

module_eval <<'.,.,', 'grammar.ra', 503
  def _reduce_121( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 506
  def _reduce_122( val, _values, result )
    result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 509
  def _reduce_123( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 512
  def _reduce_124( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 515
  def _reduce_125( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 518
  def _reduce_126( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 521
  def _reduce_127( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 524
  def _reduce_128( val, _values, result )
    result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 527
  def _reduce_129( val, _values, result )
    result = ast AST::Minus, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 530
  def _reduce_130( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 533
  def _reduce_131( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 536
  def _reduce_132( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 539
  def _reduce_133( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 542
  def _reduce_134( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 545
  def _reduce_135( val, _values, result )
    result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 548
  def _reduce_136( val, _values, result )
    result = ast AST::Not, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 551
  def _reduce_137( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 554
  def _reduce_138( val, _values, result )
    result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 557
  def _reduce_139( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 566
  def _reduce_140( val, _values, result )
    @lexer.commentpop
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 141 omitted

module_eval <<'.,.,', 'grammar.ra', 576
  def _reduce_142( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 581
  def _reduce_143( val, _values, result )
    @lexer.commentpop
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_144( val, _values, result )
    @lexer.commentpop
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 145 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_146( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 601
  def _reduce_147( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 148 omitted

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_149( val, _values, result )
    @lexer.commentpop
    result = val[1]
   result
  end
.,.,

 # reduce 150 omitted

module_eval <<'.,.,', 'grammar.ra', 617
  def _reduce_151( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 621
  def _reduce_152( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

module_eval <<'.,.,', 'grammar.ra', 632
  def _reduce_160( val, _values, result )
    result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

 # reduce 161 omitted

module_eval <<'.,.,', 'grammar.ra', 635
  def _reduce_162( val, _values, result )
 result = [val[0].value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 639
  def _reduce_163( val, _values, result )
    results = val[0] << val[2].value
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 647
  def _reduce_164( val, _values, result )
    val[1].each do |file|
        import(file)
    end

    result = AST::ASTArray.new(:children => [])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 658
  def _reduce_165( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 663
  def _reduce_166( val, _values, result )
    @lexer.commentpop
    newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 672
  def _reduce_167( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_168( val, _values, result )
    @lexer.commentpop
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 684
  def _reduce_169( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 688
  def _reduce_170( val, _values, result )
    @lexer.commentpop
    newnode val[1], :parent => val[2], :line => val[0][:line]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 689
  def _reduce_171( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 691
  def _reduce_172( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 692
  def _reduce_173( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 693
  def _reduce_174( val, _values, result )
 result = "class"
   result
  end
.,.,

 # reduce 175 omitted

module_eval <<'.,.,', 'grammar.ra', 703
  def _reduce_176( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 707
  def _reduce_177( val, _values, result )
    result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 708
  def _reduce_178( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 709
  def _reduce_179( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 710
  def _reduce_180( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

 # reduce 181 omitted

module_eval <<'.,.,', 'grammar.ra', 716
  def _reduce_182( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 720
  def _reduce_183( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 184 omitted

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_185( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 729
  def _reduce_186( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 187 omitted

module_eval <<'.,.,', 'grammar.ra', 736
  def _reduce_188( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 741
  def _reduce_189( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 745
  def _reduce_190( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 747
  def _reduce_191( val, _values, result )
    result = [val[0][:value], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 749
  def _reduce_192( val, _values, result )
    result = [val[0][:value]]
   result
  end
.,.,

 # reduce 193 omitted

module_eval <<'.,.,', 'grammar.ra', 754
  def _reduce_194( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 195 omitted

module_eval <<'.,.,', 'grammar.ra', 759
  def _reduce_196( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 197 omitted

 # reduce 198 omitted

module_eval <<'.,.,', 'grammar.ra', 765
  def _reduce_199( val, _values, result )
    result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 773
  def _reduce_200( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 780
  def _reduce_201( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 782
  def _reduce_202( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 203 omitted

 # reduce 204 omitted

 # reduce 205 omitted

module_eval <<'.,.,', 'grammar.ra', 787
  def _reduce_206( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 792
  def _reduce_207( val, _values, result )
    result = ast AST::Regex, :value => val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 800
  def _reduce_208( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 807
  def _reduce_209( val, _values, result )
    if val[1].instance_of?(AST::ASTHash)
        result = val[1]
    else
        result = ast AST::ASTHash, { :value => val[1] }
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 809
  def _reduce_210( val, _values, result )
    result = ast AST::ASTHash
   result
  end
.,.,

 # reduce 211 omitted

module_eval <<'.,.,', 'grammar.ra', 819
  def _reduce_212( val, _values, result )
    if val[0].instance_of?(AST::ASTHash)
        result = val[0].merge(val[2])
    else
        result = ast AST::ASTHash, :value => val[0]
        result.merge(val[2])
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 823
  def _reduce_213( val, _values, result )
    result = ast AST::ASTHash, { :value => { val[0] => val[2] } }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 824
  def _reduce_214( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 825
  def _reduce_215( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 826
  def _reduce_216( val, _values, result )
 result = val[0][:value]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 831
  def _reduce_217( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]
   result
  end
.,.,

 # reduce 218 omitted

module_eval <<'.,.,', 'grammar.ra', 836
  def _reduce_219( val, _values, result )
    result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
